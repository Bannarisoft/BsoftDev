// <auto-generated />
using System;
using FAM.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FAM.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.Entities.AssetCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetGroupId")
                        .HasColumnType("int")
                        .HasColumnName("AssetGroupId");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CategoryName");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Code");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("AssetGroupId");

                    b.ToTable("AssetCategories", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Code");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GroupName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("AssetGroup", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetAmc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("CoverageType")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FreeServiceCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int>("RenewalStatus")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("RenewedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("VendorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VendorEmail")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("VendorPhone")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CoverageType");

                    b.HasIndex("RenewalStatus");

                    b.ToTable("AssetAmc", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetDisposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("AssetPurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("DisposalAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTimeOffset>("DisposalDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DisposalReason")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("DisposalType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId")
                        .IsUnique();

                    b.HasIndex("AssetPurchaseId")
                        .IsUnique();

                    b.HasIndex("DisposalType")
                        .IsUnique();

                    b.ToTable("AssetDisposal", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Insuranceperiod")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("PolicyAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("PolicyNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RenewalStatus")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset>("RenewedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("VendorCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetInsurance", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int")
                        .HasColumnName("AssetId");

                    b.Property<string>("CustodianId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("CustodianId");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentId");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("SubLocationId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("UnitId");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AssetId")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.HasIndex("SubLocationId");

                    b.ToTable("AssetLocation", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetSpecifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SpecificationId")
                        .HasColumnType("int");

                    b.Property<string>("SpecificationValue")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("AssetSpecifications", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetTransferIssueDtl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("AssetTransferId")
                        .HasColumnType("int");

                    b.Property<decimal>("AssetValue")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssetTransferId");

                    b.ToTable("AssetTransferIssueDtl", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetTransferIssueHdr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AckStatus")
                        .HasColumnType("bit");

                    b.Property<string>("AuthorizedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AuthorizedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("AuthorizedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("AuthorizedIP")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset>("DocDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FromCustodianId")
                        .HasColumnType("int");

                    b.Property<string>("FromCustodianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FromDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("FromUnitId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ToCustodianId")
                        .HasColumnType("int");

                    b.Property<string>("ToCustodianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ToDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ToUnitId")
                        .HasColumnType("int");

                    b.Property<int>("TransferType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransferType");

                    b.ToTable("AssetTransferIssueHdr", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetTransferReceiptDtl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("AssetReceiptId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("SubLocationId")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssetReceiptId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SubLocationId");

                    b.ToTable("AssetTransferReceiptDtl", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetTransferReceiptHdr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetTransferId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorizedBy")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AuthorizedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset>("AuthorizedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("AuthorizedIP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset>("DocDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FromCustodianId")
                        .HasColumnType("int");

                    b.Property<string>("FromCustodianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FromDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("FromUnitId")
                        .HasColumnType("int");

                    b.Property<string>("GatePassNo")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Sdcno")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ToCustodianId")
                        .HasColumnType("int");

                    b.Property<string>("ToCustodianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ToDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ToUnitId")
                        .HasColumnType("int");

                    b.Property<int>("TransferType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetTransferId")
                        .IsUnique();

                    b.HasIndex("TransferType");

                    b.ToTable("AssetTransferReceiptHdr", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetWarranties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Document");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<string>("ServiceAddressLine1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ServiceAddressLine2")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("ServiceCityId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceClaimProcessDescription")
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("ServiceClaimStatus")
                        .HasColumnType("int");

                    b.Property<string>("ServiceContactPerson")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ServiceCountryId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceEmail")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTimeOffset?>("ServiceLastClaimDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ServiceMobileNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ServicePinCode")
                        .HasColumnType("varchar(10)");

                    b.Property<int>("ServiceStateId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WarrantyProvider")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<int>("WarrantyType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("ServiceClaimStatus");

                    b.HasIndex("WarrantyType");

                    b.ToTable("AssetWarranty", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMasterGenerals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("AssetCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AssetDescription")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<int>("AssetGroupId")
                        .HasColumnType("int");

                    b.Property<string>("AssetImage")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("AssetImage");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("AssetParentId")
                        .HasColumnType("int");

                    b.Property<int>("AssetSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("AssetType")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("ISDepreciated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTangible")
                        .HasColumnType("bit");

                    b.Property<string>("MachineCode")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("UOMId")
                        .HasColumnType("int")
                        .HasColumnName("UOMId");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkingStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetCategoryId");

                    b.HasIndex("AssetGroupId");

                    b.HasIndex("AssetParentId");

                    b.HasIndex("AssetSubCategoryId");

                    b.HasIndex("AssetType");

                    b.HasIndex("UOMId");

                    b.HasIndex("WorkingStatus");

                    b.ToTable("AssetMaster", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetPurchase.AssetAdditionalCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("Amount");

                    b.Property<int>("AssetId")
                        .HasColumnType("int")
                        .HasColumnName("AssetId");

                    b.Property<int>("AssetSourceId")
                        .HasColumnType("int")
                        .HasColumnName("AssetSourceId");

                    b.Property<int>("CostType")
                        .HasColumnType("int")
                        .HasColumnName("CostType");

                    b.Property<string>("JournalNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("JournalNo");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssetSourceId");

                    b.HasIndex("CostType");

                    b.ToTable("AssetAdditionalCost", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetPurchase.AssetPurchaseDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AcceptedQty")
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("AcceptedQty");

                    b.Property<int>("AssetId")
                        .HasColumnType("int")
                        .HasColumnName("AssetId");

                    b.Property<int>("AssetSourceId")
                        .HasColumnType("int")
                        .HasColumnName("AssetSourceId");

                    b.Property<DateTimeOffset>("BillDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("BillDate");

                    b.Property<string>("BillNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BillNo");

                    b.Property<string>("BinLocation")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BinLocation");

                    b.Property<string>("BudgetType")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BudgetType");

                    b.Property<DateTimeOffset?>("CapitalizationDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CapitalizationDate");

                    b.Property<DateTimeOffset>("GrnDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("GrnDate");

                    b.Property<int>("GrnNo")
                        .HasColumnType("int")
                        .HasColumnName("GrnNo");

                    b.Property<int>("GrnSno")
                        .HasColumnType("int")
                        .HasColumnName("GrnSno");

                    b.Property<decimal>("GrnValue")
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("GrnValue");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ItemCode");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ItemName");

                    b.Property<string>("OldUnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("OldUnitId");

                    b.Property<string>("PjDocId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PjDocId");

                    b.Property<int>("PjDocNo")
                        .HasColumnType("int")
                        .HasColumnName("PjDocNo");

                    b.Property<string>("PjDocSr")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PjDocSr");

                    b.Property<string>("PjYear")
                        .IsRequired()
                        .HasColumnType("varchar(8)")
                        .HasColumnName("PjYear");

                    b.Property<DateTimeOffset>("PoDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("PoDate");

                    b.Property<int>("PoNo")
                        .HasColumnType("int")
                        .HasColumnName("PoNo");

                    b.Property<int>("PoSno")
                        .HasColumnType("int")
                        .HasColumnName("PoSno");

                    b.Property<decimal>("PurchaseValue")
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("PurchaseValue");

                    b.Property<string>("QcCompleted")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .HasColumnName("QcCompleted");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Uom");

                    b.Property<string>("VendorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("VendorCode");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("VendorName");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssetSourceId");

                    b.ToTable("AssetPurchaseDetails", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SourceCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SourceCode");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SourceName");

                    b.HasKey("Id");

                    b.ToTable("AssetSource", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetSubCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetCategoriesId")
                        .HasColumnType("int")
                        .HasColumnName("AssetCategoriesId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Code");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("SortOrder");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SubCategoryName");

                    b.HasKey("Id");

                    b.HasIndex("AssetCategoriesId");

                    b.ToTable("AssetSubCategories", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.DepreciationDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetGroupId")
                        .HasColumnType("int");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<decimal>("AssetValue")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTimeOffset>("CapitalizationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("ClosingValue")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DaysOpening")
                        .HasColumnType("int");

                    b.Property<int>("DaysUsed")
                        .HasColumnType("int");

                    b.Property<int>("DepreciationPeriod")
                        .HasColumnType("int");

                    b.Property<int>("DepreciationType")
                        .HasColumnType("int");

                    b.Property<decimal>("DepreciationValue")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal?>("DisposalAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTimeOffset?>("DisposedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpiryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Finyear")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("NetValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,3)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("OpeningValue")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("ResidualValue")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("UsefulLifeDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetGroupId");

                    b.HasIndex("AssetId");

                    b.HasIndex("DepreciationPeriod");

                    b.HasIndex("DepreciationType");

                    b.ToTable("DepreciationDetail", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.DepreciationGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("BookType")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DepreciationGroupName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DepreciationMethod")
                        .HasColumnType("int");

                    b.Property<decimal>("DepreciationRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ResidualValue")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("SortOrder");

                    b.Property<decimal>("UsefulLife")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("AssetGroupId");

                    b.HasIndex("BookType");

                    b.HasIndex("DepreciationMethod");

                    b.ToTable("DepreciationGroups", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.FormulaTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Description");

                    b.Property<string>("FormulaName")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasColumnName("FormulaName");

                    b.Property<string>("FormulaText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FormulaText");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.ToTable("FormulaTable", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Code");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LocationName");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("SortOrder");

                    b.Property<int>("SubLocationId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Location", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.Manufactures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ManufactureName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ManufactureType")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManufactureType");

                    b.ToTable("Manufacture", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.MiscMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Code");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("MiscTypeId")
                        .HasColumnType("int")
                        .HasColumnName("MiscTypeId");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("sortOrder");

                    b.HasKey("Id");

                    b.HasIndex("MiscTypeId");

                    b.ToTable("MiscMaster", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.MiscTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("MiscTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MiscTypeCode");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("MiscTypeMaster", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.SpecificationMasters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetGroupId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("ISDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpecificationName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AssetGroupId");

                    b.ToTable("SpecificationMaster", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.SubLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Code");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationId");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SubLocationName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SubLocationName");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("SubLocation", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.UOM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Code");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("SortOrder");

                    b.Property<string>("UOMName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UOMName");

                    b.Property<int>("UOMTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UOMTypeId");

                    b.ToTable("UOM", "FixedAsset");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetCategories", b =>
                {
                    b.HasOne("Core.Domain.Entities.AssetGroup", "AssetGroup")
                        .WithMany("AssetCategories")
                        .HasForeignKey("AssetGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetGroup");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetAmc", b =>
                {
                    b.HasOne("Core.Domain.Entities.AssetMasterGenerals", "AssetMasterAmcId")
                        .WithMany("AssetAmc")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.MiscMaster", "CoverageMiscType")
                        .WithMany("AssetAmcCoverageType")
                        .HasForeignKey("CoverageType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.MiscMaster", "RenewalStatusMiscType")
                        .WithMany("AssetAmcRenewStatus")
                        .HasForeignKey("RenewalStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetMasterAmcId");

                    b.Navigation("CoverageMiscType");

                    b.Navigation("RenewalStatusMiscType");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetDisposal", b =>
                {
                    b.HasOne("Core.Domain.Entities.AssetMasterGenerals", "AssetMasterDisposal")
                        .WithOne("AssetDisposalMaster")
                        .HasForeignKey("Core.Domain.Entities.AssetMaster.AssetDisposal", "AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.AssetPurchase.AssetPurchaseDetails", "AssetPurchaseDetails")
                        .WithOne("AssetDisposalPurchase")
                        .HasForeignKey("Core.Domain.Entities.AssetMaster.AssetDisposal", "AssetPurchaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.MiscMaster", "AssetMiscDisposalType")
                        .WithOne("AssetMiscDisposalType")
                        .HasForeignKey("Core.Domain.Entities.AssetMaster.AssetDisposal", "DisposalType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetMasterDisposal");

                    b.Navigation("AssetMiscDisposalType");

                    b.Navigation("AssetPurchaseDetails");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetInsurance", b =>
                {
                    b.HasOne("Core.Domain.Entities.AssetMasterGenerals", "AssetMaster")
                        .WithMany("AssetInsurance")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetMaster");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetLocation", b =>
                {
                    b.HasOne("Core.Domain.Entities.AssetMasterGenerals", "Asset")
                        .WithOne("AssetLocation")
                        .HasForeignKey("Core.Domain.Entities.AssetMaster.AssetLocation", "AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.Location", "Location")
                        .WithMany("AssetLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.SubLocation", "SubLocation")
                        .WithMany("AssetSubLocation")
                        .HasForeignKey("SubLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Location");

                    b.Navigation("SubLocation");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetSpecifications", b =>
                {
                    b.HasOne("Core.Domain.Entities.AssetMasterGenerals", "AssetMasterId")
                        .WithMany("AssetSpecification")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.SpecificationMasters", "SpecificationMaster")
                        .WithMany("AssetSpecification")
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetMasterId");

                    b.Navigation("SpecificationMaster");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetTransferIssueDtl", b =>
                {
                    b.HasOne("Core.Domain.Entities.AssetMasterGenerals", "AssetMasterTransferIssue")
                        .WithMany("AssetTransferIssueMaster")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.AssetMaster.AssetTransferIssueHdr", "AssetTransferIssueHdr")
                        .WithMany("AssetTransferIssueDtl")
                        .HasForeignKey("AssetTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetMasterTransferIssue");

                    b.Navigation("AssetTransferIssueHdr");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetTransferIssueHdr", b =>
                {
                    b.HasOne("Core.Domain.Entities.MiscMaster", "TransferTypeIssueMiscType")
                        .WithMany("AssetTransferIssueType")
                        .HasForeignKey("TransferType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TransferTypeIssueMiscType");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetTransferReceiptDtl", b =>
                {
                    b.HasOne("Core.Domain.Entities.AssetMasterGenerals", "AssetMasterTransferReceipt")
                        .WithMany("AssetTransferReceiptMaster")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.AssetMaster.AssetTransferReceiptHdr", "AssetTransferReceiptHdr")
                        .WithMany("AssetTransferReceiptDtl")
                        .HasForeignKey("AssetReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.Location", "Location")
                        .WithMany("AssetTransferReceiptLocation")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.SubLocation", "SubLocation")
                        .WithMany("AssetTransferReceiptSubLocation")
                        .HasForeignKey("SubLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetMasterTransferReceipt");

                    b.Navigation("AssetTransferReceiptHdr");

                    b.Navigation("Location");

                    b.Navigation("SubLocation");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetTransferReceiptHdr", b =>
                {
                    b.HasOne("Core.Domain.Entities.AssetMaster.AssetTransferIssueHdr", "AssetTransferIssueHdr")
                        .WithOne("AssetTransferReceiptHdr")
                        .HasForeignKey("Core.Domain.Entities.AssetMaster.AssetTransferReceiptHdr", "AssetTransferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.MiscMaster", "TransferTypeReceiptMiscType")
                        .WithMany("AssetTransferReceiptHdr")
                        .HasForeignKey("TransferType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetTransferIssueHdr");

                    b.Navigation("TransferTypeReceiptMiscType");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetWarranties", b =>
                {
                    b.HasOne("Core.Domain.Entities.AssetMasterGenerals", "AssetMasterId")
                        .WithMany("AssetWarranty")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.MiscMaster", "MiscClaimStatus")
                        .WithMany("WarrantyType")
                        .HasForeignKey("ServiceClaimStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_ClaimStatus_Misc");

                    b.HasOne("Core.Domain.Entities.MiscMaster", "MiscWarrantyTypes")
                        .WithMany("WarrantyClaim")
                        .HasForeignKey("WarrantyType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_WarrantyType_Misc");

                    b.Navigation("AssetMasterId");

                    b.Navigation("MiscClaimStatus");

                    b.Navigation("MiscWarrantyTypes");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMasterGenerals", b =>
                {
                    b.HasOne("Core.Domain.Entities.AssetCategories", "AssetCategories")
                        .WithMany("AssetMasterGeneral")
                        .HasForeignKey("AssetCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.AssetGroup", "AssetGroup")
                        .WithMany("AssetMasterGeneral")
                        .HasForeignKey("AssetGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.AssetMasterGenerals", "AssetParent")
                        .WithMany("AssetChildren")
                        .HasForeignKey("AssetParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Domain.Entities.AssetSubCategories", "AssetSubCategories")
                        .WithMany("AssetMasterGeneral")
                        .HasForeignKey("AssetSubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.MiscMaster", "AssetMiscType")
                        .WithMany("AssetMiscTypeGenerals")
                        .HasForeignKey("AssetType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_AssetType_Misc");

                    b.HasOne("Core.Domain.Entities.UOM", "UomMaster")
                        .WithMany("AssetGeneralsUom")
                        .HasForeignKey("UOMId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_AssetUOM_UOMMaster");

                    b.HasOne("Core.Domain.Entities.MiscMaster", "AssetWorkType")
                        .WithMany("AssetWorkTypeGenerals")
                        .HasForeignKey("WorkingStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_WorkingStatus_Misc");

                    b.Navigation("AssetCategories");

                    b.Navigation("AssetGroup");

                    b.Navigation("AssetMiscType");

                    b.Navigation("AssetParent");

                    b.Navigation("AssetSubCategories");

                    b.Navigation("AssetWorkType");

                    b.Navigation("UomMaster");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetPurchase.AssetAdditionalCost", b =>
                {
                    b.HasOne("Core.Domain.Entities.AssetMasterGenerals", "Asset")
                        .WithMany("AssetAdditionalCost")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.AssetSource", "AssetSource")
                        .WithMany("AssetAdditionalCost")
                        .HasForeignKey("AssetSourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.MiscMaster", "CostMiscType")
                        .WithMany("AssetAdditionalCost")
                        .HasForeignKey("CostType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("AssetSource");

                    b.Navigation("CostMiscType");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetPurchase.AssetPurchaseDetails", b =>
                {
                    b.HasOne("Core.Domain.Entities.AssetMasterGenerals", "Asset")
                        .WithMany("AssetPurchase")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.AssetSource", "AssetSource")
                        .WithMany("AssetPurchase")
                        .HasForeignKey("AssetSourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("AssetSource");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetSubCategories", b =>
                {
                    b.HasOne("Core.Domain.Entities.AssetCategories", "AssetCategories")
                        .WithMany("AssetSubCategories")
                        .HasForeignKey("AssetCategoriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetCategories");
                });

            modelBuilder.Entity("Core.Domain.Entities.DepreciationDetails", b =>
                {
                    b.HasOne("Core.Domain.Entities.AssetGroup", "AssetGroup")
                        .WithMany("DepreciationDetails")
                        .HasForeignKey("AssetGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.AssetMasterGenerals", "AssetMasterId")
                        .WithMany("DepreciationDetails")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.MiscMaster", "DepMiscType")
                        .WithMany("DepreciationPeriod")
                        .HasForeignKey("DepreciationPeriod")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.MiscMaster", "DepType")
                        .WithMany("DepType")
                        .HasForeignKey("DepreciationType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetGroup");

                    b.Navigation("AssetMasterId");

                    b.Navigation("DepMiscType");

                    b.Navigation("DepType");
                });

            modelBuilder.Entity("Core.Domain.Entities.DepreciationGroups", b =>
                {
                    b.HasOne("Core.Domain.Entities.AssetGroup", "AssetGroup")
                        .WithMany("DepreciationGroups")
                        .HasForeignKey("AssetGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.MiscMaster", "BookMiscType")
                        .WithMany("BookType")
                        .HasForeignKey("BookType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_BookType_Misc");

                    b.HasOne("Core.Domain.Entities.MiscMaster", "DepMiscType")
                        .WithMany("DepreciationMethod")
                        .HasForeignKey("DepreciationMethod")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_DepreciationMethod_Misc");

                    b.Navigation("AssetGroup");

                    b.Navigation("BookMiscType");

                    b.Navigation("DepMiscType");
                });

            modelBuilder.Entity("Core.Domain.Entities.Manufactures", b =>
                {
                    b.HasOne("Core.Domain.Entities.MiscMaster", "ManufactureTypes")
                        .WithMany("Manufactures")
                        .HasForeignKey("ManufactureType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_ManufactureType_Misc");

                    b.Navigation("ManufactureTypes");
                });

            modelBuilder.Entity("Core.Domain.Entities.MiscMaster", b =>
                {
                    b.HasOne("Core.Domain.Entities.MiscTypeMaster", "MiscTypeMaster")
                        .WithMany("MiscMaster")
                        .HasForeignKey("MiscTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MiscTypeMaster");
                });

            modelBuilder.Entity("Core.Domain.Entities.SpecificationMasters", b =>
                {
                    b.HasOne("Core.Domain.Entities.AssetGroup", "AssetGroupMaster")
                        .WithMany("SpecificationMaster")
                        .HasForeignKey("AssetGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetGroupMaster");
                });

            modelBuilder.Entity("Core.Domain.Entities.SubLocation", b =>
                {
                    b.HasOne("Core.Domain.Entities.Location", "Location")
                        .WithMany("SubLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Core.Domain.Entities.UOM", b =>
                {
                    b.HasOne("Core.Domain.Entities.MiscMaster", "UOMType")
                        .WithMany("UOMs")
                        .HasForeignKey("UOMTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UOMType");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetCategories", b =>
                {
                    b.Navigation("AssetMasterGeneral");

                    b.Navigation("AssetSubCategories");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetGroup", b =>
                {
                    b.Navigation("AssetCategories");

                    b.Navigation("AssetMasterGeneral");

                    b.Navigation("DepreciationDetails");

                    b.Navigation("DepreciationGroups");

                    b.Navigation("SpecificationMaster");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetTransferIssueHdr", b =>
                {
                    b.Navigation("AssetTransferIssueDtl");

                    b.Navigation("AssetTransferReceiptHdr")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMaster.AssetTransferReceiptHdr", b =>
                {
                    b.Navigation("AssetTransferReceiptDtl");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetMasterGenerals", b =>
                {
                    b.Navigation("AssetAdditionalCost");

                    b.Navigation("AssetAmc");

                    b.Navigation("AssetChildren");

                    b.Navigation("AssetDisposalMaster");

                    b.Navigation("AssetInsurance");

                    b.Navigation("AssetLocation");

                    b.Navigation("AssetPurchase");

                    b.Navigation("AssetSpecification");

                    b.Navigation("AssetTransferIssueMaster");

                    b.Navigation("AssetTransferReceiptMaster");

                    b.Navigation("AssetWarranty");

                    b.Navigation("DepreciationDetails");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetPurchase.AssetPurchaseDetails", b =>
                {
                    b.Navigation("AssetDisposalPurchase");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetSource", b =>
                {
                    b.Navigation("AssetAdditionalCost");

                    b.Navigation("AssetPurchase");
                });

            modelBuilder.Entity("Core.Domain.Entities.AssetSubCategories", b =>
                {
                    b.Navigation("AssetMasterGeneral");
                });

            modelBuilder.Entity("Core.Domain.Entities.Location", b =>
                {
                    b.Navigation("AssetLocations");

                    b.Navigation("AssetTransferReceiptLocation");

                    b.Navigation("SubLocations");
                });

            modelBuilder.Entity("Core.Domain.Entities.MiscMaster", b =>
                {
                    b.Navigation("AssetAdditionalCost");

                    b.Navigation("AssetAmcCoverageType");

                    b.Navigation("AssetAmcRenewStatus");

                    b.Navigation("AssetMiscDisposalType");

                    b.Navigation("AssetMiscTypeGenerals");

                    b.Navigation("AssetTransferIssueType");

                    b.Navigation("AssetTransferReceiptHdr");

                    b.Navigation("AssetWorkTypeGenerals");

                    b.Navigation("BookType");

                    b.Navigation("DepType");

                    b.Navigation("DepreciationMethod");

                    b.Navigation("DepreciationPeriod");

                    b.Navigation("Manufactures");

                    b.Navigation("UOMs");

                    b.Navigation("WarrantyClaim");

                    b.Navigation("WarrantyType");
                });

            modelBuilder.Entity("Core.Domain.Entities.MiscTypeMaster", b =>
                {
                    b.Navigation("MiscMaster");
                });

            modelBuilder.Entity("Core.Domain.Entities.SpecificationMasters", b =>
                {
                    b.Navigation("AssetSpecification");
                });

            modelBuilder.Entity("Core.Domain.Entities.SubLocation", b =>
                {
                    b.Navigation("AssetSubLocation");

                    b.Navigation("AssetTransferReceiptSubLocation");
                });

            modelBuilder.Entity("Core.Domain.Entities.UOM", b =>
                {
                    b.Navigation("AssetGeneralsUom");
                });
#pragma warning restore 612, 618
        }
    }
}
