// <auto-generated />
using System;
using MaintenanceManagement.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MaintenanceManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250418075559_Workorder_new")]
    partial class Workorder_new
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.Entities.ActivityCheckListMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityCheckList")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("ActivityCheckList");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int")
                        .HasColumnName("ActivityID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityCheckListMaster", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.ActivityMachineGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityMasterId")
                        .HasColumnType("int")
                        .HasColumnName("ActivityMasterId");

                    b.Property<int>("MachineGroupId")
                        .HasColumnType("int")
                        .HasColumnName("MachineGroupId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityMasterId");

                    b.HasIndex("MachineGroupId");

                    b.ToTable("ActivityMachineGroup", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.ActivityMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("ActivityName");

                    b.Property<int>("ActivityType")
                        .HasColumnType("int")
                        .HasColumnName("ActivityType");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Description");

                    b.Property<int>("EstimatedDuration")
                        .HasColumnType("int")
                        .HasColumnName("EstimatedDuration");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityMaster", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.CostCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("BudgetAllocated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0.00m);

                    b.Property<string>("CostCenterCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CostCenterCode");

                    b.Property<string>("CostCenterName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CostCenterName");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentId");

                    b.Property<DateTimeOffset>("EffectiveDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("EffectiveDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Remarks");

                    b.Property<string>("ResponsiblePerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ResponsiblePerson");

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("UnitId");

                    b.HasKey("Id");

                    b.ToTable("CostCenter", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.MachineGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GroupName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Manufacturer")
                        .HasColumnType("int")
                        .HasColumnName("Manufacturer");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MachineGroup", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.MachineGroupUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("MachineGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MachineGroupId");

                    b.ToTable("MachineGroupUser", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.MachineMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("DepartmentId");

                    b.Property<DateTimeOffset>("InstallationDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("InstallationDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MachineCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("MachineCode");

                    b.Property<int>("MachineGroupId")
                        .HasColumnType("int");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("MachineName");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("ProductionCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0.00m);

                    b.Property<int>("ShiftMasterId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("UnitId");

                    b.Property<int>("UomId")
                        .HasColumnType("int")
                        .HasColumnName("UomId");

                    b.Property<int>("WorkCenterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("MachineGroupId");

                    b.HasIndex("ShiftMasterId");

                    b.HasIndex("WorkCenterId");

                    b.ToTable("MachineMaster", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.MaintenanceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CategoryName");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MaintenanceCategory", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.MaintenanceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<decimal?>("EstimatedServiceCost")
                        .HasColumnType("decimal");

                    b.Property<decimal?>("EstimatedSpareCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("ExpectedDispatchDate")
                        .HasColumnType("DateTimeOffset");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<int>("MaintenanceTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModeOfDispatchId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldVendorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestStatusId")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.Property<int?>("SparesTypeId")
                        .HasColumnType("int")
                        .HasColumnName("SparesTypeId");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("MaintenanceTypeId");

                    b.HasIndex("ModeOfDispatchId");

                    b.HasIndex("RequestStatusId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("ServiceLocationId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("SparesTypeId");

                    b.ToTable("MaintenanceRequest", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.MaintenanceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TypeName");

                    b.HasKey("Id");

                    b.ToTable("MaintenanceType", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.MiscMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Code");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("MiscTypeId")
                        .HasColumnType("int")
                        .HasColumnName("MiscTypeId");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("sortOrder");

                    b.HasKey("Id");

                    b.HasIndex("MiscTypeId");

                    b.ToTable("MiscMaster", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.MiscTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("MiscTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MiscTypeCode");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("MiscTypeMaster", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.PreventiveSchedulerActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int")
                        .HasColumnName("ActivityId");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Description");

                    b.Property<decimal>("EstimatedTimeHrs")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("EstimatedTimeHrs");

                    b.Property<int>("PreventiveSchedulerHdrId")
                        .HasColumnType("int")
                        .HasColumnName("PreventiveSchedulerHdrId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("PreventiveSchedulerHdrId");

                    b.ToTable("PreventiveSchedulerActivity", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.PreventiveSchedulerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MachineId")
                        .HasColumnType("int")
                        .HasColumnName("MachineId");

                    b.Property<DateOnly?>("NextDueDate")
                        .HasColumnType("date")
                        .HasColumnName("NextDueDate");

                    b.Property<int>("PreventiveSchedulerId")
                        .HasColumnType("int")
                        .HasColumnName("PreventiveSchedulerId");

                    b.Property<string>("RescheduleReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RescheduleReason");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("PreventiveSchedulerId");

                    b.ToTable("PreventiveSchedulerDetail", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.PreventiveSchedulerHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentId");

                    b.Property<decimal>("DownTimeEstimateHrs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("EffectiveDate")
                        .HasColumnType("date")
                        .HasColumnName("EffectiveDate");

                    b.Property<int>("FrequencyInterval")
                        .HasColumnType("int")
                        .HasColumnName("FrequencyInterval");

                    b.Property<int>("FrequencyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FrequencyTypeId");

                    b.Property<int>("FrequencyUnitId")
                        .HasColumnType("int")
                        .HasColumnName("FrequencyUnitId");

                    b.Property<int>("GraceDays")
                        .HasColumnType("int")
                        .HasColumnName("GraceDays");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsDownTimeRequired")
                        .HasColumnType("bit")
                        .HasColumnName("IsDownTimeRequired");

                    b.Property<int>("MachineGroupId")
                        .HasColumnType("int")
                        .HasColumnName("MachineGroupId");

                    b.Property<int>("MaintenanceCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("MaintenanceCategoryId");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ReminderMaterialReqDays")
                        .HasColumnType("int")
                        .HasColumnName("ReminderMaterialReqDays");

                    b.Property<int>("ReminderWorkOrderDays")
                        .HasColumnType("int")
                        .HasColumnName("ReminderWorkOrderDays");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("ScheduleId");

                    b.HasKey("Id");

                    b.HasIndex("FrequencyTypeId");

                    b.HasIndex("FrequencyUnitId");

                    b.HasIndex("MachineGroupId");

                    b.HasIndex("MaintenanceCategoryId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("PreventiveSchedulerHeader", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.PreventiveSchedulerItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemId");

                    b.Property<string>("OldItemId")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("OldItemId");

                    b.Property<int>("PreventiveSchedulerHdrId")
                        .HasColumnType("int")
                        .HasColumnName("PreventiveSchedulerId");

                    b.Property<int>("RequiredQty")
                        .HasColumnType("int")
                        .HasColumnName("RequiredQty");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int")
                        .HasColumnName("SourceId");

                    b.HasKey("Id");

                    b.HasIndex("PreventiveSchedulerHdrId");

                    b.ToTable("PreventiveSchedulerItems", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.ShiftMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ShiftCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ShiftMaster", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.ShiftMasterDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BreakDurationInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("DurationInHours")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ShiftMasterId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftSupervisorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShiftMasterId");

                    b.ToTable("ShiftMasterDetails", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.WorkCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("UnitId");

                    b.Property<string>("WorkCenterCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("WorkCenterCode");

                    b.Property<string>("WorkCenterName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("WorkCenterName");

                    b.HasKey("Id");

                    b.ToTable("WorkCenter", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.WorkOrderMaster.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short>("CompanyId")
                        .HasColumnType("smallint")
                        .HasColumnName("CompanyId");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Image")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Image");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("PreventiveScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("PreventiveScheduleId");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Remarks");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("RequestId");

                    b.Property<short>("RootCauseId")
                        .HasColumnType("smallint")
                        .HasColumnName("RootCauseId");

                    b.Property<short>("StatusId")
                        .HasColumnType("smallint")
                        .HasColumnName("StatusId");

                    b.Property<short?>("TotalManPower")
                        .HasColumnType("smallint")
                        .HasColumnName("TotalManPower");

                    b.Property<decimal?>("TotalSpentHours")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("TotalSpentHours");

                    b.Property<short>("UnitId")
                        .HasColumnType("smallint")
                        .HasColumnName("UnitId");

                    b.Property<string>("WorkOrderDocNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("WorkOrderDocNo");

                    b.HasKey("Id");

                    b.ToTable("WorkOrder", "Maintenance");
                });

            modelBuilder.Entity("Core.Domain.Entities.ActivityCheckListMaster", b =>
                {
                    b.HasOne("Core.Domain.Entities.ActivityMaster", "ActivityMaster")
                        .WithMany("ActivityCheckLists")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityMaster");
                });

            modelBuilder.Entity("Core.Domain.Entities.ActivityMachineGroup", b =>
                {
                    b.HasOne("Core.Domain.Entities.ActivityMaster", "ActivityMaster")
                        .WithMany("ActivityMachineGroups")
                        .HasForeignKey("ActivityMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.MachineGroup", "MachineGroup")
                        .WithMany("ActivityMachineGroups")
                        .HasForeignKey("MachineGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityMaster");

                    b.Navigation("MachineGroup");
                });

            modelBuilder.Entity("Core.Domain.Entities.MachineGroupUser", b =>
                {
                    b.HasOne("Core.Domain.Entities.MachineGroup", "MachineGroup")
                        .WithMany("MachineGroupUser")
                        .HasForeignKey("MachineGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MachineGroup");
                });

            modelBuilder.Entity("Core.Domain.Entities.MachineMaster", b =>
                {
                    b.HasOne("Core.Domain.Entities.CostCenter", "CostCenter")
                        .WithMany("MachineMasters")
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.MachineGroup", "MachineGroup")
                        .WithMany("MachineMasters")
                        .HasForeignKey("MachineGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.ShiftMaster", "ShiftMaster")
                        .WithMany("MachineMasters")
                        .HasForeignKey("ShiftMasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.WorkCenter", "WorkCenter")
                        .WithMany("MachineMasters")
                        .HasForeignKey("WorkCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("MachineGroup");

                    b.Navigation("ShiftMaster");

                    b.Navigation("WorkCenter");
                });

            modelBuilder.Entity("Core.Domain.Entities.MaintenanceRequest", b =>
                {
                    b.HasOne("Core.Domain.Entities.MachineMaster", "Machine")
                        .WithMany("MaintenanceRequest")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.MiscMaster", "MiscMaintenanceType")
                        .WithMany("MaintenanceType")
                        .HasForeignKey("MaintenanceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.MiscMaster", "ModeOfDispatchType")
                        .WithMany("ModeOfDispatchType")
                        .HasForeignKey("ModeOfDispatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Domain.Entities.MiscMaster", "RequestStatus")
                        .WithMany("RequestStatus")
                        .HasForeignKey("RequestStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Domain.Entities.MiscMaster", "MiscRequestType")
                        .WithMany("RequestType")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.MiscMaster", "ServiceLocation")
                        .WithMany("ServiceLocation")
                        .HasForeignKey("ServiceLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Domain.Entities.MiscMaster", "ServiceType")
                        .WithMany("ServiceType")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Domain.Entities.MiscMaster", "SpareType")
                        .WithMany("SpareType")
                        .HasForeignKey("SparesTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Machine");

                    b.Navigation("MiscMaintenanceType");

                    b.Navigation("MiscRequestType");

                    b.Navigation("ModeOfDispatchType");

                    b.Navigation("RequestStatus");

                    b.Navigation("ServiceLocation");

                    b.Navigation("ServiceType");

                    b.Navigation("SpareType");
                });

            modelBuilder.Entity("Core.Domain.Entities.MiscMaster", b =>
                {
                    b.HasOne("Core.Domain.Entities.MiscTypeMaster", "MiscTypeMaster")
                        .WithMany("MiscMaster")
                        .HasForeignKey("MiscTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MiscTypeMaster");
                });

            modelBuilder.Entity("Core.Domain.Entities.PreventiveSchedulerActivity", b =>
                {
                    b.HasOne("Core.Domain.Entities.ActivityMaster", "Activity")
                        .WithMany("PreventiveSchedulerActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.PreventiveSchedulerHeader", "PreventiveScheduler")
                        .WithMany("PreventiveSchedulerActivities")
                        .HasForeignKey("PreventiveSchedulerHdrId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("PreventiveScheduler");
                });

            modelBuilder.Entity("Core.Domain.Entities.PreventiveSchedulerDetail", b =>
                {
                    b.HasOne("Core.Domain.Entities.MachineMaster", "Machine")
                        .WithMany("PreventiveSchedulerDetail")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.PreventiveSchedulerHeader", "PreventiveScheduler")
                        .WithMany("PreventiveSchedulerDetails")
                        .HasForeignKey("PreventiveSchedulerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("PreventiveScheduler");
                });

            modelBuilder.Entity("Core.Domain.Entities.PreventiveSchedulerHeader", b =>
                {
                    b.HasOne("Core.Domain.Entities.MiscMaster", "MiscFrequencyType")
                        .WithMany("FrequencyType")
                        .HasForeignKey("FrequencyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.MiscMaster", "MiscFrequencyUnit")
                        .WithMany("FrequencyUnit")
                        .HasForeignKey("FrequencyUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.MachineGroup", "MachineGroup")
                        .WithMany("PreventiveSchedulerHeaders")
                        .HasForeignKey("MachineGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.MaintenanceCategory", "MaintenanceCategory")
                        .WithMany("PreventiveSchedulerHeaders")
                        .HasForeignKey("MaintenanceCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.MiscMaster", "MiscSchedule")
                        .WithMany("Schedule")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MachineGroup");

                    b.Navigation("MaintenanceCategory");

                    b.Navigation("MiscFrequencyType");

                    b.Navigation("MiscFrequencyUnit");

                    b.Navigation("MiscSchedule");
                });

            modelBuilder.Entity("Core.Domain.Entities.PreventiveSchedulerItems", b =>
                {
                    b.HasOne("Core.Domain.Entities.PreventiveSchedulerHeader", "PreventiveScheduler")
                        .WithMany("PreventiveSchedulerItems")
                        .HasForeignKey("PreventiveSchedulerHdrId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PreventiveScheduler");
                });

            modelBuilder.Entity("Core.Domain.Entities.ShiftMasterDetail", b =>
                {
                    b.HasOne("Core.Domain.Entities.ShiftMaster", "ShiftMaster")
                        .WithMany("ShiftMasterDetails")
                        .HasForeignKey("ShiftMasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ShiftMaster");
                });

            modelBuilder.Entity("Core.Domain.Entities.ActivityMaster", b =>
                {
                    b.Navigation("ActivityCheckLists");

                    b.Navigation("ActivityMachineGroups");

                    b.Navigation("PreventiveSchedulerActivities");
                });

            modelBuilder.Entity("Core.Domain.Entities.CostCenter", b =>
                {
                    b.Navigation("MachineMasters");
                });

            modelBuilder.Entity("Core.Domain.Entities.MachineGroup", b =>
                {
                    b.Navigation("ActivityMachineGroups");

                    b.Navigation("MachineGroupUser");

                    b.Navigation("MachineMasters");

                    b.Navigation("PreventiveSchedulerHeaders");
                });

            modelBuilder.Entity("Core.Domain.Entities.MachineMaster", b =>
                {
                    b.Navigation("MaintenanceRequest");

                    b.Navigation("PreventiveSchedulerDetail");
                });

            modelBuilder.Entity("Core.Domain.Entities.MaintenanceCategory", b =>
                {
                    b.Navigation("PreventiveSchedulerHeaders");
                });

            modelBuilder.Entity("Core.Domain.Entities.MiscMaster", b =>
                {
                    b.Navigation("FrequencyType");

                    b.Navigation("FrequencyUnit");

                    b.Navigation("MaintenanceType");

                    b.Navigation("ModeOfDispatchType");

                    b.Navigation("RequestStatus");

                    b.Navigation("RequestType");

                    b.Navigation("Schedule");

                    b.Navigation("ServiceLocation");

                    b.Navigation("ServiceType");

                    b.Navigation("SpareType");
                });

            modelBuilder.Entity("Core.Domain.Entities.MiscTypeMaster", b =>
                {
                    b.Navigation("MiscMaster");
                });

            modelBuilder.Entity("Core.Domain.Entities.PreventiveSchedulerHeader", b =>
                {
                    b.Navigation("PreventiveSchedulerActivities");

                    b.Navigation("PreventiveSchedulerDetails");

                    b.Navigation("PreventiveSchedulerItems");
                });

            modelBuilder.Entity("Core.Domain.Entities.ShiftMaster", b =>
                {
                    b.Navigation("MachineMasters");

                    b.Navigation("ShiftMasterDetails");
                });

            modelBuilder.Entity("Core.Domain.Entities.WorkCenter", b =>
                {
                    b.Navigation("MachineMasters");
                });
#pragma warning restore 612, 618
        }
    }
}
