using FluentValidation;
using UserManagement.API.Validation.Country;
using Core.Application.Country.Commands.CreateCountry;
using Core.Application.Country.Commands.UpdateCountry;
using UserManagement.API.Validation.State;
using Core.Application.State.Commands.CreateState;
using Core.Application.State.Commands.UpdateState;
using UserManagement.API.Validation.City;
using Core.Application.City.Commands.CreateCity;
using Core.Application.City.Commands.UpdateCity;
using UserManagement.API.Validation.Users;
using Core.Application.Users.Commands.CreateUser;
using Core.Application.Users.Commands.UpdateUser;
using UserManagement.API.Validation.RoleEntitlements;
using Core.Application.RoleEntitlements.Commands.CreateRoleEntitlement;
using Core.Application.RoleEntitlements.Commands.UpdateRoleRntitlement;
using UserManagement.API.Validation.Module;
using Core.Application.Modules.Commands.CreateModule;
using Core.Application.Modules.Commands.UpdateModule;
using UserManagement.API.Validation.Entity;
using Core.Application.Entity.Commands.CreateEntity;
using Core.Application.Entity.Commands.UpdateEntity;
using UserManagement.API.Validation.Unit;
using Core.Application.Units.Commands.CreateUnit;
using Core.Application.Units.Commands.UpdateUnit;
using UserManagement.API.Validation.Department;
using Core.Application.Departments.Commands.CreateDepartment;
using Core.Application.Departments.Commands.UpdateDepartment;
using UserManagement.API.Validation.UserRole;
using Core.Application.UserRole.Commands.CreateRole;
using Core.Application.UserRole.Commands.UpdateRole;
using UserManagement.API.Validation.Divisions;
using Core.Application.Divisions.Commands.CreateDivision;
using Core.Application.Divisions.Commands.UpdateDivision;
using UserManagement.API.Validation.Companies;
using Core.Application.Companies.Commands.CreateCompany;
using Core.Application.Companies.Commands.UpdateCompany;
using UserManagement.API.Validation.Unit.UserManagement.API.Validation.Unit;
using Core.Application.Users.Commands.UpdateFirstTimeUserPassword;
using Core.Application.Users.Commands.ChangeUserPassword;
using Core.Application.PwdComplexityRule.Commands.CreatePasswordComplexityRule;
using UserManagement.API.Validation.PasswordComplexityrule;
using Core.Application.UserLogin.Commands.UserLogin;
using UserManagement.API.Validation.UserLogin;
using Microsoft.Extensions.DependencyInjection;
using Core.Application.PasswordComplexityRule.Commands.UpdatePasswordComplexityRule;
using Core.Application.AdminSecuritySettings.Commands.CreateAdminSecuritySettings;
using UserManagement.API.Validation.AdminSecuritySettings;
using Core.Application.AdminSecuritySettings.Commands.UpdateAdminSecuritySettings;
using Core.Application.CompanySettings.Commands.CreateCompanySettings;
using UserManagement.API.Validation.CompanySettings;
using Core.Application.FinancialYear.Command.CreateFinancialYear;
using UserManagement.API.Validation.FinancialYear;
using Core.Application.FinancialYear.Command.UpdateFinancialYear;
using Core.Application.CompanySettings.Commands.UpdateCompanySettings;
using Core.Application.Currency.Commands.CreateCurrency;
using Core.Application.Language.Commands.CreateLanguage;
using UserManagement.API.Validation.Currency;
using UserManagement.API.Validation.Languages;
using Core.Application.Currency.Commands.UpdateCurrency;
using Core.Application.Language.Commands.UpdateLanguage;
using Core.Application.Companies.Commands.UploadFileCompany;
using Core.Application.EntityLevelAdmin.Commands.ResetPassword;
using UserManagement.API.Validation.Admin;
using Core.Application.Entity.Commands.DeleteEntity;
using Core.Application.State.Commands.DeleteState;
using Core.Application.Companies.Commands.DeleteCompany;
using Core.Application.Modules.Commands.DeleteModule;
using Core.Application.UserRole.Commands.DeleteRole;
using Core.Application.Country.Commands.DeleteCountry;
using Core.Application.Divisions.Commands.DeleteDivision;
using Core.Application.Users.Commands.ForgotUserPassword;
using Core.Application.Users.Commands.ResetUserPassword;
using Core.Application.UserGroup.Commands.CreateUserGroup;
using Core.Application.UserGroup.Commands.UpdateUesrGroup;
using Core.Application.UserGroup.Commands.DeleteUserGroup;
using UserManagement.API.Validation.UserGroup;
using Core.Application.UserLogin.Commands.DeactivateUserSession;
using Core.Application.CustomFields.Commands.CreateCustomField;
using UserManagement.API.Validation.CustomFields;
using Core.Application.CustomFields.Commands.UpdateCustomField;
using Core.Application.CustomFields.Commands.DeleteCustomField;
using Core.Application.DepartmentGroup.Command.CreateDepartmentGroup;
using UserManagement.API.Validation.DepartmentGroup;
using Core.Application.DepartmentGroup.Command.UpdateDepartmentGroup;
using Core.Application.DepartmentGroup.Command.DeleteDepartmentGroup;
namespace UserManagement.API.Validation.Common
{
    public class ValidationService
    {
        public void AddValidationServices(IServiceCollection services)
        {
            services.AddScoped<MaxLengthProvider>();
            services.AddScoped<IValidator<CreateCountryCommand>, CreateCountryCommandValidator>();
            services.AddScoped<IValidator<UpdateCountryCommand>, UpdateCountryCommandValidator>();
            services.AddScoped<IValidator<CreateUserCommand>, CreateUserCommandValidator>();
            services.AddScoped<IValidator<UpdateUserCommand>, UpdateUserCommandValidator>();
            services.AddScoped<IValidator<CreateRoleEntitlementCommand>, CreateRoleEntitlementCommandValidator>();
            services.AddScoped<IValidator<UpdateRoleEntitlementCommand>, UpdateRoleEntitlementCommandValidator>();
            services.AddScoped<IValidator<CreateModuleCommand>, CreateModuleCommandValidator>();
            services.AddScoped<IValidator<UpdateModuleCommand>, UpdateModuleCommandValidator>();
            services.AddScoped<IValidator<CreateEntityCommand>, CreateEntityCommandValidator>();
            services.AddScoped<IValidator<UpdateEntityCommand>, UpdateEntityCommandValidator>();
            services.AddScoped<IValidator<CreateUnitCommand>, CreateUnitCommandValidator>();
            services.AddScoped<IValidator<UpdateUnitCommand>, UpdateUnitCommandValidator>();
            services.AddScoped<IValidator<CreateCompanyCommand>, CreateCompanyCommandValidator>();
            services.AddScoped<IValidator<UpdateCompanyCommand>, UpdateCompanyCommandValidator>();
            services.AddScoped<IValidator<CreateDepartmentCommand>, CreateDepartmentCommandValidator>();
            services.AddScoped<IValidator<UpdateDepartmentCommand>, UpdateDepartmentCommandValidator>();
            services.AddScoped<IValidator<CreateDivisionCommand>, CreateDivisionCommandValidator>();
            services.AddScoped<IValidator<UpdateDivisionCommand>, UpdateDivisionCommandValidator>();
            services.AddScoped<IValidator<CreateStateCommand>, CreateStateCommandValidator>();
            services.AddScoped<IValidator<UpdateStateCommand>, UpdateStateCommandValidator>();
            services.AddScoped<IValidator<CreateCityCommand>, CreateCityCommandValidator>();
            services.AddScoped<IValidator<UpdateCityCommand>, UpdateCityCommandValidator>();
            services.AddScoped<IValidator<CreateRoleCommand>, CreateRoleCommandValidator>();
            services.AddScoped<IValidator<UpdateRoleCommand>, UpdateRoleCommandValidator>();
            services.AddScoped<IValidator<FirstTimeUserPasswordCommand>, PasswordChangeCommandValidator>();
            services.AddScoped<IValidator<ChangeUserPasswordCommand>, ExistingUserPasswordChangeCommandValidator>();
            services.AddScoped<IValidator<CreatePasswordComplexityRuleCommand>, CreatePasswordComplexityRuleCommandValidator>();
            services.AddScoped<IValidator<UserLoginCommand>, UserLoginCommandValidator>();
            services.AddScoped<IValidator<UpdatePasswordComplexityRuleCommand>, UpdatePasswordComplexityRuleCommandValidator>();
            services.AddScoped<IValidator<CreateAdminSecuritySettingsCommand>, CreateAdminSecuritySettingsCommandValidator>();
            services.AddScoped<IValidator<UpdateAdminSecuritySettingsCommand>, UpdateAdminSecuritySettingsCommandValidator>();
            services.AddScoped<IValidator<FirstTimeUserPasswordCommand>, PasswordChangeCommandValidator>();
            services.AddScoped<IValidator<CreateCompanySettingsCommand>, CreateCompanySettingsCommandValidator>();
            services.AddScoped<IValidator<CreateFinancialYearCommand>, CreateFinancialYearCommandValidator>();
            services.AddScoped<IValidator<UpdateFinancialYearCommand>, UpdateFinancialYearCommandValidator>();
            services.AddScoped<IValidator<UpdateCompanySettingsCommand>, UpdateCompanySettingsCommandValidator>();
            services.AddScoped<IValidator<CreateCurrencyCommand>, CreateCurrencyCommandValidator>();
            services.AddScoped<IValidator<CreateLanguageCommand>, CreateLanguageCommandValidator>();
            services.AddScoped<IValidator<UpdateCurrencyCommand>, UpdateCurrencyCommandValidator>();
            services.AddScoped<IValidator<UpdateLanguageCommand>, UpdateLanguageCommandValidator>();
            services.AddScoped<IValidator<UploadFileCompanyCommand>, UploadCompanyCommandValidator>();
            services.AddScoped<IValidator<ResetPasswordCommand>, SetAdminPasswordCommandValidator>();
            services.AddScoped<IValidator<DeleteEntityCommand>, DeleteEntityCommandValidator>();
            services.AddScoped<IValidator<DeleteStateCommand>, DeleteStateCommandValidator>();
            services.AddScoped<IValidator<DeleteCompanyCommand>, DeleteCompanyCommandValidator>();
            services.AddScoped<IValidator<DeleteModuleCommand>, DeleteModuleCommandValidator>();
            services.AddScoped<IValidator<DeleteRoleCommand>, DeleteRoleCommandValidator>();
            services.AddScoped<IValidator<DeleteCountryCommand>, DeleteCountryCommandValidator>();

            services.AddScoped<IValidator<DeleteDivisionCommand>, DeleteDivisionCommandValidator>();
            services.AddScoped<IValidator<CreateUserGroupCommand>, CreateUserGroupCommandValidator>();
            services.AddScoped<IValidator<UpdateUserGroupCommand>, UpdateUserGroupCommandValidator>();
            services.AddScoped<IValidator<DeleteUserGroupCommand>, DeleteUserGroupCommandValidator>();
            services.AddScoped<IValidator<ForgotUserPasswordCommand>, ForgotPasswordCommandValidator>();
            services.AddScoped<IValidator<ResetUserPasswordCommand>, ResetUserPasswordCommandValidator>();
            services.AddScoped<IValidator<DeactivateUserSessionCommand>, DeactivateUserSessionCommandValidator>();
            services.AddScoped<IValidator<CreateCustomFieldCommand>, CreateCustomFieldCommandValidator>();
            services.AddScoped<IValidator<UpdateCustomFieldCommand>, UpdateCustomFieldCommandValidator>();
            services.AddScoped<IValidator<DeleteCustomFieldCommand>, DeleteCustomFieldCommandValidator>();
            services.AddScoped<IValidator<CreateDepartmentGroupCommand>, CreateDepartmentGroupCommandValidator>();
            services.AddScoped<IValidator<UpdateDepartmentGroupCommand>, UpdateDepartmentGroupCommandValidator>();
            services.AddScoped<IValidator<DeleteDepartmentGroupCommand>, DeleteDepartmentGroupCommandValidator>();
           
         }  
    }
}