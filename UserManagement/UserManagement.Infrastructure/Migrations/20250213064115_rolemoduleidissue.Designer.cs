// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserManagement.Infrastructure.Data;

#nullable disable

namespace BSOFT.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250213064115_rolemoduleidissue")]
    partial class rolemoduleidissue
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.Entities.AdminSecuritySettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountAutoUnlockMinutes")
                        .HasColumnType("int")
                        .HasColumnName("AccountAutoUnlockMinutes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<bool>("IsCaptchaEnabledOnLogin")
                        .HasColumnType("bit")
                        .HasColumnName("IsCaptchaEnabledOnLogin");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool>("IsForcePasswordChangeOnFirstLogin")
                        .HasColumnType("bit")
                        .HasColumnName("IsForcePasswordChangeOnFirstLogin");

                    b.Property<bool>("IsTwoFactorAuthenticationEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("IsTwoFactorAuthenticationEnabled");

                    b.Property<int>("MaxConcurrentLogins")
                        .HasColumnType("int")
                        .HasColumnName("MaxConcurrentLogins");

                    b.Property<int>("MaxFailedLoginAttempts")
                        .HasColumnType("int")
                        .HasColumnName("MaxFailedLoginAttempts");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PasswordExpiryAlertDays")
                        .HasColumnType("int")
                        .HasColumnName("PasswordExpiryAlertDays");

                    b.Property<int>("PasswordExpiryDays")
                        .HasColumnType("int")
                        .HasColumnName("PasswordExpiryDays");

                    b.Property<int>("PasswordHistoryCount")
                        .HasColumnType("int")
                        .HasColumnName("PasswordHistoryCount");

                    b.Property<int>("PasswordResetCodeExpiryMinutes")
                        .HasColumnType("int")
                        .HasColumnName("PasswordResetCodeExpiryMinutes");

                    b.Property<int>("SessionTimeoutMinutes")
                        .HasColumnType("int")
                        .HasColumnName("SessionTimeoutMinutes");

                    b.HasKey("Id");

                    b.ToTable("AdminSecuritySettings", "AppSecurity");
                });

            modelBuilder.Entity("Core.Domain.Entities.Cities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("CityCode");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CityName");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedByName");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("CreatedIP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("ModifiedAt");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("ModifiedBy");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ModifiedByName");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("ModifiedIP");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateId");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("City", "AppData");
                });

            modelBuilder.Entity("Core.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CSTNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CSTNo");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CompanyName");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("EntityId");

                    b.Property<string>("GstNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GstNumber");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LegalName");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Logo");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TAN")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TAN");

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TIN");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Website");

                    b.Property<int>("YearOfEstablishment")
                        .HasColumnType("int")
                        .HasColumnName("YearOfEstablishment");

                    b.HasKey("Id");

                    b.ToTable("Company", "AppData");
                });

            modelBuilder.Entity("Core.Domain.Entities.CompanyAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("AddressLine1");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("AddressLine2");

                    b.Property<string>("AlternatePhone")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("AlternatePhone");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyId");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryId");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Phone");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PinCode");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("CompanyAddress", "AppData");
                });

            modelBuilder.Entity("Core.Domain.Entities.CompanyContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyId");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Designation");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Phone");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Remark");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("CompanyContact", "AppData");
                });

            modelBuilder.Entity("Core.Domain.Entities.CompanySettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutoReleaseTime")
                        .HasColumnType("int")
                        .HasColumnName("AutoReleaseTime");

                    b.Property<bool>("CaptchaOnLogin")
                        .HasColumnType("bit")
                        .HasColumnName("CaptchaOnLogin");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyId");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int")
                        .HasColumnName("FailedLoginAttempts");

                    b.Property<int>("FinancialYearId")
                        .HasColumnType("int")
                        .HasColumnName("FinancialYearId");

                    b.Property<int>("ForgotPasswordCodeExpiry")
                        .HasColumnType("int")
                        .HasColumnName("ForgotPasswordCodeExpiry");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageId");

                    b.Property<int>("MaxConcurrentLogins")
                        .HasColumnType("int")
                        .HasColumnName("MaxConcurrentLogins");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PasswordExpiryAlert")
                        .HasColumnType("int")
                        .HasColumnName("PasswordExpiryAlert");

                    b.Property<int>("PasswordExpiryDays")
                        .HasColumnType("int")
                        .HasColumnName("PasswordExpiryDays");

                    b.Property<int>("PasswordHistoryCount")
                        .HasColumnType("int")
                        .HasColumnName("PasswordHistoryCount");

                    b.Property<int>("SessionTimeout")
                        .HasColumnType("int")
                        .HasColumnName("SessionTimeout");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int")
                        .HasColumnName("TimeZone");

                    b.Property<bool>("TwoFactorAuth")
                        .HasColumnType("bit")
                        .HasColumnName("TwoFactorAuth");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId")
                        .IsUnique();

                    b.HasIndex("FinancialYearId")
                        .IsUnique();

                    b.HasIndex("LanguageId")
                        .IsUnique();

                    b.ToTable("CompanySetting", "AppData");
                });

            modelBuilder.Entity("Core.Domain.Entities.Countries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("CountryCode");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CountryName");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedByName");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("CreatedIP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("ModifiedAt");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("ModifiedBy");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ModifiedByName");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("ModifiedIP");

                    b.HasKey("Id");

                    b.ToTable("Country", "AppData");
                });

            modelBuilder.Entity("Core.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Currency", "AppData");
                });

            modelBuilder.Entity("Core.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DeptName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ShortName");

                    b.HasKey("Id");

                    b.ToTable("Department", "AppData");
                });

            modelBuilder.Entity("Core.Domain.Entities.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Division", "AppData");
                });

            modelBuilder.Entity("Core.Domain.Entities.Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Email");

                    b.Property<string>("EntityCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("EntityCode");

                    b.Property<string>("EntityDescription")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("EntityDescription");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EntityName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Phone");

                    b.HasKey("Id");

                    b.ToTable("Entity", "AppData");
                });

            modelBuilder.Entity("Core.Domain.Entities.FinancialYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedByName");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("CreatedIP");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("EndDate");

                    b.Property<string>("FinYearName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FinYearName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("ModifiedAt");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("ModifiedBy");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ModifiedByName");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("ModifiedIP");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("StartDate");

                    b.Property<string>("StartYear")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("StartYear");

                    b.HasKey("Id");

                    b.ToTable("FinancialYear", "AppData");
                });

            modelBuilder.Entity("Core.Domain.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Language", "AppData");
                });

            modelBuilder.Entity("Core.Domain.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("MenuIcon")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MenuUrl")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Menus", "AppData");
                });

            modelBuilder.Entity("Core.Domain.Entities.Modules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Modules", "AppData");
                });

            modelBuilder.Entity("Core.Domain.Entities.PasswordComplexityRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PwdComplexityRule")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("PwdComplexityRule");

                    b.HasKey("Id");

                    b.ToTable("PasswordComplexityRule", "AppSecurity");
                });

            modelBuilder.Entity("Core.Domain.Entities.PasswordLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CreatedIP");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PasswordHash");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordLog", "AppSecurity");
                });

            modelBuilder.Entity("Core.Domain.Entities.RoleEntitlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanAdd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("CanApprove")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("CanDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("CanExport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("CanUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("CanView")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("RoleEntitlements", "AppSecurity");
                });

            modelBuilder.Entity("Core.Domain.Entities.RoleMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanAdd")
                        .HasColumnType("bit");

                    b.Property<bool>("CanApprove")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("CanExport")
                        .HasColumnType("bit");

                    b.Property<bool>("CanUpdate")
                        .HasColumnType("bit");

                    b.Property<bool>("CanView")
                        .HasColumnType("bit");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("RoleModuleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleModuleId");

                    b.ToTable("RoleMenu", "AppSecurity");
                });

            modelBuilder.Entity("Core.Domain.Entities.RoleModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleModule", "AppSecurity");
                });

            modelBuilder.Entity("Core.Domain.Entities.States", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedByName");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("CreatedIP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("ModifiedAt");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("ModifiedBy");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ModifiedByName");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("ModifiedIP");

                    b.Property<string>("StateCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("StateCode");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("StateName");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State", "AppData");
                });

            modelBuilder.Entity("Core.Domain.Entities.TimeZones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Location");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("Offset")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Offset");

                    b.HasKey("Id");

                    b.ToTable("TimeZones", "AppData");
                });

            modelBuilder.Entity("Core.Domain.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CINNO")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CINNO");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int")
                        .HasColumnName("DivisionId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ShortName");

                    b.Property<string>("UnitHeadName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UnitHeadName");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UnitName");

                    b.HasKey("Id");

                    b.ToTable("Unit", "AppData");
                });

            modelBuilder.Entity("Core.Domain.Entities.UnitAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("AddressLine1");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("AddressLine2");

                    b.Property<string>("AlternateNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("AlternateNumber");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ContactNumber");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryId");

                    b.Property<int>("PinCode")
                        .HasColumnType("int")
                        .HasColumnName("PinCode");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateId");

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("UnitId");

                    b.HasKey("Id");

                    b.HasIndex("UnitId")
                        .IsUnique();

                    b.ToTable("UnitAddress", "AppData");
                });

            modelBuilder.Entity("Core.Domain.Entities.UnitContacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Designation");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PhoneNo");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Remarks");

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("UnitId");

                    b.HasKey("Id");

                    b.HasIndex("UnitId")
                        .IsUnique();

                    b.ToTable("UnitContacts", "AppData");
                });

            modelBuilder.Entity("Core.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int")
                        .HasColumnName("DivisionId");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EmailId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsFirstTimeUser")
                        .HasColumnType("bit")
                        .HasColumnName("IsFirstTimeUser");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastName");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Mobile");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PasswordHash");

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("UnitId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UserName");

                    b.Property<int>("UserType")
                        .HasColumnType("int")
                        .HasColumnName("UserType");

                    b.HasKey("UserId");

                    b.ToTable("Users", "AppSecurity");
                });

            modelBuilder.Entity("Core.Domain.Entities.UserCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCompany", "AppSecurity");
                });

            modelBuilder.Entity("Core.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RoleName");

                    b.HasKey("Id");

                    b.ToTable("UserRole", "AppSecurity");
                });

            modelBuilder.Entity("Core.Domain.Entities.UserRoleAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int")
                        .HasColumnName("UserRoleId");

                    b.HasKey("Id")
                        .HasName("PK_UserRoleAllocations_Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRoleAllocation", "AppSecurity");
                });

            modelBuilder.Entity("Core.Domain.Entities.UserSessions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrowserInfo")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("BrowserInfo");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime")
                        .HasColumnName("ExpiresAt");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("JwtId")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("JwtId");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("datetime")
                        .HasColumnName("LastActivity");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions", "AppSecurity");
                });

            modelBuilder.Entity("Core.Domain.Entities.UserUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("UnitId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserId");

                    b.ToTable("UserUnit", "AppSecurity");
                });

            modelBuilder.Entity("Core.Domain.Entities.Cities", b =>
                {
                    b.HasOne("Core.Domain.Entities.States", "States")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("States");
                });

            modelBuilder.Entity("Core.Domain.Entities.CompanyAddress", b =>
                {
                    b.HasOne("Core.Domain.Entities.Company", "Company")
                        .WithOne("CompanyAddress")
                        .HasForeignKey("Core.Domain.Entities.CompanyAddress", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Core.Domain.Entities.CompanyContact", b =>
                {
                    b.HasOne("Core.Domain.Entities.Company", "Company")
                        .WithOne("CompanyContact")
                        .HasForeignKey("Core.Domain.Entities.CompanyContact", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Core.Domain.Entities.CompanySettings", b =>
                {
                    b.HasOne("Core.Domain.Entities.Currency", "Currency")
                        .WithOne("CompanySettings")
                        .HasForeignKey("Core.Domain.Entities.CompanySettings", "CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.FinancialYear", "FinancialYear")
                        .WithOne("CompanySettings")
                        .HasForeignKey("Core.Domain.Entities.CompanySettings", "FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.Language", "Language")
                        .WithOne("CompanySettings")
                        .HasForeignKey("Core.Domain.Entities.CompanySettings", "LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("FinancialYear");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Core.Domain.Entities.Menu", b =>
                {
                    b.HasOne("Core.Domain.Entities.Menu", "Parent")
                        .WithMany("ChildMenus")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.Modules", "Module")
                        .WithMany("Menus")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Core.Domain.Entities.PasswordLog", b =>
                {
                    b.HasOne("Core.Domain.Entities.User", "User")
                        .WithMany("Passwords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domain.Entities.RoleEntitlement", b =>
                {
                    b.HasOne("Core.Domain.Entities.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Core.Domain.Entities.RoleMenu", b =>
                {
                    b.HasOne("Core.Domain.Entities.Menu", "Menu")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.RoleModule", "RoleModule")
                        .WithMany("RoleMenus")
                        .HasForeignKey("RoleModuleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("RoleModule");
                });

            modelBuilder.Entity("Core.Domain.Entities.RoleModule", b =>
                {
                    b.HasOne("Core.Domain.Entities.Modules", "Module")
                        .WithMany("RoleModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.UserRole", "Role")
                        .WithMany("roleModules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Domain.Entities.States", b =>
                {
                    b.HasOne("Core.Domain.Entities.Countries", "Countries")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Core.Domain.Entities.UnitAddress", b =>
                {
                    b.HasOne("Core.Domain.Entities.Unit", "Unit")
                        .WithOne("UnitAddress")
                        .HasForeignKey("Core.Domain.Entities.UnitAddress", "UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Core.Domain.Entities.UnitContacts", b =>
                {
                    b.HasOne("Core.Domain.Entities.Unit", "Unit")
                        .WithOne("UnitContacts")
                        .HasForeignKey("Core.Domain.Entities.UnitContacts", "UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Core.Domain.Entities.UserCompany", b =>
                {
                    b.HasOne("Core.Domain.Entities.Company", "company")
                        .WithMany("UserCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.User", "user")
                        .WithMany("UserCompanies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Core.Domain.Entities.UserRoleAllocation", b =>
                {
                    b.HasOne("Core.Domain.Entities.User", "User")
                        .WithMany("UserRoleAllocations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.UserRole", "UserRole")
                        .WithMany("UserRoleAllocations")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Core.Domain.Entities.UserSessions", b =>
                {
                    b.HasOne("Core.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Entities.UserUnit", b =>
                {
                    b.HasOne("Core.Domain.Entities.Unit", "Unit")
                        .WithMany("UserUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.User", "User")
                        .WithMany("UserUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domain.Entities.Company", b =>
                {
                    b.Navigation("CompanyAddress")
                        .IsRequired();

                    b.Navigation("CompanyContact")
                        .IsRequired();

                    b.Navigation("UserCompanies");
                });

            modelBuilder.Entity("Core.Domain.Entities.Countries", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("Core.Domain.Entities.Currency", b =>
                {
                    b.Navigation("CompanySettings")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Entities.FinancialYear", b =>
                {
                    b.Navigation("CompanySettings")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Entities.Language", b =>
                {
                    b.Navigation("CompanySettings")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Entities.Menu", b =>
                {
                    b.Navigation("ChildMenus");

                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("Core.Domain.Entities.Modules", b =>
                {
                    b.Navigation("Menus");

                    b.Navigation("RoleModules");
                });

            modelBuilder.Entity("Core.Domain.Entities.RoleModule", b =>
                {
                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("Core.Domain.Entities.States", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Core.Domain.Entities.Unit", b =>
                {
                    b.Navigation("UnitAddress");

                    b.Navigation("UnitContacts");

                    b.Navigation("UserUnits");
                });

            modelBuilder.Entity("Core.Domain.Entities.User", b =>
                {
                    b.Navigation("Passwords");

                    b.Navigation("UserCompanies");

                    b.Navigation("UserRoleAllocations");

                    b.Navigation("UserUnits");
                });

            modelBuilder.Entity("Core.Domain.Entities.UserRole", b =>
                {
                    b.Navigation("UserRoleAllocations");

                    b.Navigation("roleModules");
                });
#pragma warning restore 612, 618
        }
    }
}
